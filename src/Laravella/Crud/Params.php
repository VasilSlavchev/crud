<?php namespace Laravella\Crud;

use \Auth;

/**
 * 
 * Used to pass a consistent set of data to views and prevent "$variable not found" errors.
 * 
 */
class Params {

    public $action = "";
    public $tableMeta = null;
    public $tables = null;
    public $dataA = array();
    public $paginated = null;
    public $primaryTables = array();
    public $prefix = "";
    public $tableActionViews = null;
    public $view = null;
    public $selects = array();
    public $log = array();
    public $status = "success";
    public $displayType = "text/html";
    public $menu = array();

    /**
     * 
     * Used to pass a consistent set of data to views and prevent "$variable not found" errors.
     * 
     * @param type $status Wether the action succeeded or not.  See log for further details.
     * @param type $action the action that controller is performing. See _db_actions.name 
     * @param type $tableMeta The table's meta data. As generated by Laravella\Crud\Table::getTableMeta()
     * @param type $tables Is an array of Table objects. Actual data.
     * @param type $pageSize. The size of the pagination.
     * @param type $primaryTables A list of records with primary keys related to this table's via foreign keys.
     * @param type $prefix Used to prepend the href on the primary key
     * @param type $view An entry in _db_views
     */
    public function __construct($status, $message, $log, $view = null, $action = "", $tableMeta = null, $tableActionViews = null, $prefix = "", $selects = null, $displayType = "", $dataA = array(), $tables = array(), $paginated = array(), $primaryTables = array())
    {
        $this->status = $status;
        $this->message = $message;
        $this->action = $action;
        $this->tableMeta = $tableMeta;
        if (is_object($view))
        {
            $this->pageSize = $view->page_size;
        }
        else
        {
            $this->pageSize = 10;
        }
        $this->prefix = $prefix;
        $this->tableActionViews = $tableActionViews;
        $this->view = $view;
        $this->selects = $selects;
        $this->displayType = $displayType;
        $this->log = $log;
        //potentially null
        $this->paginated = $paginated;
        $this->tables = $tables;
        $this->primaryTables = $primaryTables;
        $this->dataA = $dataA;

        if (Auth::check())
        {
            $userId = Auth::user()->id;
            $this->menu = $this->__getMenu($userId);
        }
    }

    private function __getMenu($userId)
    {
        DB::table('users as u')->join('usergroups as ug', 'u.usergroup_id', '=', 'ug.id')
                ->join('_db_menu_permissions as mp', 'mp.usergroup_id', '=', 'ug.id')
                ->join('_db_menus as m', 'm.id', '=', 'mp.menu_id')
                ->join('_db_menus as m2', 'm2.parent_id', '=', 'm.id')
                ->where('u.id', '=', $userId)
                ->select('u.username', 'ug.`group`', 'm.id', 'm.icon_class', 'm.label', 'm.href', 'm.parent_id', 'm2.id', 'm2.icon_class', 'm2.label', 'm2.href', 'm2.parent_id');
        /*
          SELECT u.username, ug.`group`,
          m.id, m.icon_class, m.label, m.href, m.parent_id,
          m2.id, m2.icon_class, m2.label, m2.href, m2.parent_id
          FROM users u inner join usergroups ug on u.usergroup_id = ug.id
          inner join _db_menu_permissions mp on mp.usergroup_id = ug.id
          inner join _db_menus m on m.id = mp.menu_id
          inner join _db_menus m2 on m2.parent_id = m.id
          where username = 'admin';
         */
    }

    /**
     * For Edit
     * 
     * @param type $status
     * @param type $message
     * @param type $log
     * @param type $view
     * @param type $action
     * @param type $tableMeta
     * @param type $tableActionViews
     * @param type $prefix
     * @param type $selects
     * @param type $tables
     * @param type $paginated
     * @param type $primaryTables
     * @return \Laravella\Crud\Params
     */
    public static function forEdit($status, $message, $log, $view = null, $action = "", $tableMeta = null, $tableActionViews = null, $prefix = "", $selects = null, $displayType = "text/html", $tables = null, $paginated = null, $primaryTables = null)
    {
        $params = new Params();
        return $params;
    }

    /*
     * meta
     * data
     * name
     * pagesize
     * selects
     */

    public function asArray()
    {

        $returnA = array("action" => $this->action,
            "meta" => $this->tableMeta['fields_array'],
            "tableName" => $this->tableMeta['table']['name'],
            "prefix" => $this->prefix,
            "pageSize" => $this->pageSize,
            "view" => $this->view,
            "selects" => $this->selects,
            "log" => $this->log,
            "status" => $this->status,
            "message" => $this->message,
            "pkName" => $this->tableMeta['table']['pk_name'],
            "displayType" => $this->displayType,
            "tables" => $this->tables,
            "data" => $this->paginated,
            "dataA" => $this->dataA,
            "pkTables" => $this->primaryTables
        ); //$this->tables[$tableName]['tableMetaData']['table']['pk_name']);

        if (isset($this->tableActionViews) && is_object($this->tableActionViews))
        {
            $returnA["title"] = $this->tableActionViews->title;
        }
        else
        {
            $returnA["title"] = "";
        }

        $returnA['params'] = json_encode($returnA);

        return $returnA;
    }

}

?>
